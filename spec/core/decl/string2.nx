trait Charset<Size: Z>
  decl (char: @(Char)) : @(Char<self>)
end

trait Encoding<Charset: CS, Unitsize: UZ>
  decl (string: @(String)) : @(String<self>)
end

# The Universal Coded Character Set, ISO/IEC10646.
# This is the default charset for character literals in Onyx.
@[LiteralSuffix(/ucs/)]
namespace UCS <~ Charset<32>;

# # The American Standard Code for Information Interchange
# @[LiteralSuffix(/ascii/)]
# namespace ASCII
#   <~ Charset<8>
#   <~ Encoding<ASCII, 8>
# end

@[LiteralSuffix(/ucs2/)]
namespace UCS2 <~ Encoding<UCS, 16>;

@[LiteralSuffix(/ucs4/)]
namespace UCS4 <~ Encoding<UCS, 32>;

# This is the default encoding for string literals in Onyx.
@[LiteralSuffix(/utf8/)]
namespace UTF8 <~ Encoding<UCS, 8>;

namespace UTF16<Endian: @(Bool)> <~ Encoding<UCS, 16>;

@[LiteralSuffix(/utf16be/)]
alias UTF16BE to UTF16<true>

@[LiteralSuffix(/utf16le/)]
alias UTF16LE to UTF16<false>

namespace UTF32<Endian: @(Bool)> <~ Encoding<UCS, 32>;

@[LiteralSuffix(/utf32be/)]
alias UTF32BE to UTF32<true>

@[LiteralSuffix(/utf32le/)]
alias UTF32LE to UTF32<false>

# Multiple codeunits make up a single codepoint, i.e. `Char`.
distinct alias Codeunit<Encoding: E> to UInt<E.<Unitsize>>
end

# A codepoint in given `Charset`.
distinct alias Char<Charset: CS> to UInt<CS.<Size>>
end

distinct alias String<Encoding: E, *>
to Array<Type: Codeunit<E>, *>
  derive Container::Enumerable<Char<E.<Charset>>>
    impl ~each(block) as each_char;
  end

  derive Container::Indexable<Char<E.<Charset>>, Size>
    impl ~[](index) as get_char;
    impl ~[]=(index, value) as set_char;

    impl ~(
      self && Enumerable<Char<E.<Charset>>>
    ).each(block) as each_char;
  end

  derive Container::Enumerable<Codeunit<E>>
    impl ~each(block) as each_codeunit;
  end
end
