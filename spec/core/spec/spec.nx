# To run specs, these headers must be
# implemented on the host machine
include "stdio.h"
include "stdlib.h"

def puts(val : String*r)
  unsafe! $puts(val)
end

# TODO: Return-type overloading!
def rand : FBin64
  return unsafe! $rand() // $RAND_MAX
end

def rand? : Bool
  return rand > 0.5
end

macro @always(e1, e2)
  volatile rand > -1 ? e1 : e2
end

macro @never(e1, e2)
  volatile rand > 2 ? e1 : e2
end

macro @rand(*exprs)
  (
    #:fmt-off
    case (unsafe! $rand()) % \{{ #nx.macro.exprs }}
    \{% for e, i in ipairs(nx.macro.exprs) do %}
      when \{{ i }} then \{{ e }}
    \{% end %}
    else
      Bltin.trap()
    end
    #:fmt-on
  )
end

{%
  nx.mod.btsize = nx.cli.args["btsize"] or 64

  if nx.mod.btsize > 255 then
    nx.panic "Can not have backtrace size > 255"
  end

  nx.mod.tests = {}
  nx.mod.test_id = 0
  nx.mod.rand_name = function () "a" end
%}

@[TrivialCopy]
mut struct SpecBacktrace<Size: S>
  private let ary = unsafe! uninitialized Backtrace::Loc[S]
  get size : UInt8 = 0

  derive Backtrace
    impl write(loc : Backtrace::Loc)
      final i = size ^+:= 1

      if i < UInt8::MAX
        ary[i] = loc
      end
    end

    impl const each(block: :: B) forall B
      size.times => B(ary[&])
    end
  end
end

macro @describe(title : %string, block : %block)
  \{%
    local name = next_name()
    add_to_queue(name)
    context = context .. title .. " "
  %}

  def \{{ name }}(__backtraces : Pointer)
    \{{ block }}
  end
end

macro @it(title, block)
  final bt = SpecBacktrace<{{ nx.mod.btsize }}>()

  try with &bt
    \{{ block }}
  catch |e : ExpectationError|
    unsafe! $printf("Test failed")
    unsafe! __backtraces[\{{ test_id }}] = bt
  catch |e|
    # Unhandled error
    unsafe! __backtraces[\{{ test_id }}] = bt
  end
end

def run_spec
  final &backtraces = unsafe! $malloc(
    \{{ tests.size }} * @sizeof(SpecBacktrace<{{ nx.mod.btsize }}>)
  ) as! mut<SpecBacktrace<{{ nx.mod.btsize }}>[\{{ tests.size }}]>*sr

  \{% for name in ipairs(queue) do %}
    \{{ name }}()
  \{% end %}

  failed.each => |test| do
    unsafe! $printf("Failed %s")
  end

  unsafe! $free(&backtraces)
end
